{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "devapi.lifeplusmentalcare.com:2080",
  "port": 2080,
  "basePath": "/v1",
  "info": {
    "version": "0.0.1",
    "title": "Teddy server based on microservice",
    "description": "This describes the APIs of Teddy server.\n\n# Status\n\nThe following documentation includes apis for Teddy server in functions.\nThis documentation includes some functions that are used by internal tools.\n\nThis API documentation is maintained by the Teddy team in Korea and Australia.\n\n# Cross-Origin Resource Sharing\n\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n",
    "termsOfService": "https://teddy.com/portal/content/tos",
    "contact": {
      "email": "support@teddy.com"
    },
    "x-logo": {
      "url": "https://teddy.com/res/image/logo.png"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "users",
      "description": "Functions can be accessed with user authentication.\nThese endpoints can process the requests for Creating(POST), Retrieving(GET), Update(UPDATE), Delete(DELETE) to users.\n"
    }
  ],
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    },
    "teddy_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://lifeplusmentalcare.swagger.io/oauth/authorize",
      "flow": "implicit",
      "scopes": {
        "read:users": "read your users",
        "write:users": "modify users"
      }
    }
  },
  "paths": {
    "/users": {
      "get": {
        "operationId": "TeddyV1ListUsers",
        "summary": "List all users",
        "tags": [
          "users"
        ],
        "description": "List all users after signed in.\n",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A paged array of users",
            "headers": {
              "x-next": {
                "type": "string",
                "description": "A link to the next page of responses"
              }
            },
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "TeddyV1CreateUser",
        "summary": "Create a user",
        "tags": [
          "users"
        ],
        "description": "Create a user. This api needs no authentication.\n",
        "responses": {
          "201": {
            "description": "Null response"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "operationId": "TeddyV1GetUser",
        "summary": "A user profile for a specific user",
        "tags": [
          "users"
        ],
        "description": "Show a user profile for a specific user after signed in.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The id of the user to retrieve",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "operationId": "TeddyV1UpdateUser",
        "summary": "Update a user for a specific user",
        "tags": [
          "users"
        ],
        "description": "Update the user for a specific user after signed in\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "the ID of user that needs to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "teddy_auth": [
              "write:users",
              "read:users"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "TeddyV1DeleteUser",
        "summary": "Deletes a user for a specfic user",
        "tags": [
          "users"
        ],
        "description": "Delete the user for a specific user after signed in\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "teddy_auth": [
              "write:users",
              "read:users"
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Users": {
      "type": "object",
      "properties": {
        "items": {
          "type": "object",
          "example": "{\n  \"items\": [\n    {\n      \"id\": \"58edbddab2adb500213092bd\"\n    },\n    {\n      \"id\": \"548f5d05f8645a6b0c31fa4f\"\n    },\n    {\n      \"id\": \"56d8c5b72b0ba0001d44d4c2\"\n    }\n  ],\n  \"pages\": 1,\n  \"total\": 3,\n  \"elapsed\": 4\n}\n"
        },
        "pages": {
          "type": "integer",
          "example": 1
        },
        "total": {
          "type": "integer",
          "example": 10
        },
        "elapsed": {
          "type": "integer",
          "example": 5
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}