openapi: 3.0.0
info:
  title: Teddy server based on microservice
  description: |
    This describes the APIs of Teddy server.

    # Status

    The following documentation includes apis for Teddy server in functions.
    This documentation includes some functions that are used by internal tools.

    This API documentation is maintained by the Teddy team in Korea and Australia.

    # Cross-Origin Resource Sharing

    This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).
    And that allows cross-domain communication from the browser.
    All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.
  termsOfService: https://teddy.com/portal/content/tos
  contact:
    email: support@teddy.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1-oas3
  x-logo:
    url: https://teddy.com/res/image/logo.png
servers:
- url: https://api.teddy.com/v1
tags:
- name: users
  description: |
    Functions can be accessed with user authentication.
    These endpoints can process the requests for Creating(POST), Retrieving(GET), Update(UPDATE), Delete(DELETE) to users.
paths:
  /users:
    get:
      tags:
      - users
      summary: List all users
      description: |
        List all users after signed in.
      operationId: TeddyV1ListUsers
      parameters:
      - name: limit
        in: query
        description: How many items to return at one time (max 100)
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
        example: 20
      responses:
        "200":
          description: A paged array of users
          headers:
            x-next:
              description: A link to the next page of responses
              style: simple
              explode: false
              schema:
                type: string
            schema:
              $ref: '#/components/schemas/Users'
    post:
      tags:
      - users
      summary: Create a user
      description: |
        Create a user. This api needs no authentication.
      operationId: TeddyV1CreateUser
      responses:
        "201":
          description: Null response
        default:
          description: unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userId}:
    get:
      tags:
      - users
      summary: A user profile for a specific user
      description: |
        Show a user profile for a specific user after signed in.
      operationId: TeddyV1GetUser
      parameters:
      - name: userId
        in: path
        description: The id of the user to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Expected response to a valid request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - users
      summary: Update a user for a specific user
      description: |
        Update the user for a specific user after signed in
      operationId: TeddyV1UpdateUser
      parameters:
      - name: userId
        in: path
        description: the ID of user that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        "405":
          description: Invalid input
      security:
      - teddy_auth:
        - write:users
        - read:users
    delete:
      tags:
      - users
      summary: Deletes a user for a specfic user
      description: |
        Delete the user for a specific user after signed in
      operationId: TeddyV1DeleteUser
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: userId
        in: path
        description: User id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
      security:
      - teddy_auth:
        - write:users
        - read:users
components:
  schemas:
    User:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Users:
      type: object
      properties:
        items:
          type: object
          example: |
            {
              "items": [
                {
                  "id": "58edbddab2adb500213092bd"
                },
                {
                  "id": "548f5d05f8645a6b0c31fa4f"
                },
                {
                  "id": "56d8c5b72b0ba0001d44d4c2"
                }
              ],
              "pages": 1,
              "total": 3,
              "elapsed": 4
            }
        pages:
          type: integer
          example: 1
        total:
          type: integer
          example: 10
        elapsed:
          type: integer
          example: 5
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    body:
      type: object
      properties:
        name:
          type: string
          description: Updated name of the pet
        status:
          type: string
          description: Updated status of the pet
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
    teddy_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://teddy.swagger.io/oauth/authorize
          scopes:
            read:users: read your users
            write:users: modify users
